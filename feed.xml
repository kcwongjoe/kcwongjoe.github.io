<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kcwongjoe.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kcwongjoe.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-26T11:45:20+00:00</updated><id>https://kcwongjoe.github.io/feed.xml</id><title type="html">Joe Wong</title><subtitle>Joe Wong websites </subtitle><entry><title type="html">yt-dlp Quickstart</title><link href="https://kcwongjoe.github.io/blog/2025/yt-dlp-quickstart/" rel="alternate" type="text/html" title="yt-dlp Quickstart"/><published>2025-03-26T00:00:00+00:00</published><updated>2025-03-26T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2025/yt-dlp-quickstart</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2025/yt-dlp-quickstart/"><![CDATA[<h1 id="install-yt-dlp">Install yt-dlp</h1> <p>Step 1: Download and install yt-dlp: <a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a></p> <p>Step 2: Download and place the ffmpeg.exe into the yt-dlp folder: <a href="https://ffmpeg.org/download.html">ffmpeg</a></p> <h1 id="check-subtitle-code">Check subtitle code</h1> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yt-dlp <span class="nt">--list-subs</span> <span class="nt">--skip-download</span> <span class="s2">"video_url"</span>
</code></pre></div></div> <h1 id="download-video-with-subtitle">Download video with subtitle</h1> <h2 id="download-video-in-mp4-which-is-h264-codec">Download video in mp4 which is h264 codec</h2> <p>The maximum resolution supported by h264 codec is 1080p. h264 support by almost all device. If the video resolution is below or equal to 1080p, it is recommended to use h264 codec.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yt-dlp <span class="nt">-S</span> <span class="s2">"vcodec:h264,res:1080,acodec:m4a"</span> <span class="s2">"video_url"</span> <span class="nt">--write-subs</span> <span class="nt">--sub-langs</span> <span class="s2">"en,zh-HK"</span> <span class="nt">--convert-subs</span> srt
</code></pre></div></div> <h2 id="download-video-in-mp4-which-is-h265-codec">Download video in mp4 which is h265 codec</h2> <p>The maximum resolution supported by h265 codec is 4k.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yt-dlp <span class="nt">-S</span> <span class="s2">"vcodec:h265,res:4k,acodec:m4a"</span> <span class="s2">"video_url"</span> <span class="nt">--write-subs</span> <span class="nt">--sub-langs</span> <span class="s2">"en,zh-HK"</span> <span class="nt">--convert-subs</span> srt
</code></pre></div></div>]]></content><author><name></name></author><category term="tools"/><category term="tools"/><summary type="html"><![CDATA[Install yt-dlp]]></summary></entry><entry><title type="html">How to debug MSVC in release mode</title><link href="https://kcwongjoe.github.io/blog/2025/debug-in-msvc/" rel="alternate" type="text/html" title="How to debug MSVC in release mode"/><published>2025-03-05T00:00:00+00:00</published><updated>2025-03-05T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2025/debug-in-msvc</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2025/debug-in-msvc/"><![CDATA[<h1 id="using-debugview">Using DebugView</h1> <p>Step 1: Download DebugView: <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/">DebugView</a></p> <p>Step 2: Open DebugView and set the filter, for example:</p> <div class="row mt-3"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2025-03-05-debug-view/debugview_filter-480.webp 480w,/assets/img/blog/2025-03-05-debug-view/debugview_filter-800.webp 800w,/assets/img/blog/2025-03-05-debug-view/debugview_filter-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2025-03-05-debug-view/debugview_filter.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Step 3: Select the “Capture” Menu and try to enable all items except the last one for “Log Boot”</p> <h1 id="change-in-the-code">Change in the code</h1> <p>Using the OutputDebugString(). For example:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">int</span> <span class="n">testing_value</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">wostringstream</span> <span class="n">ss</span><span class="p">;</span>
<span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="s">L"Joe: Testing Value"</span> <span class="o">&lt;&lt;</span> <span class="n">testing_value</span> <span class="o">&lt;&lt;</span> <span class="s">"."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="n">OutputDebugString</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming"/><category term="cpp"/><category term="programming"/><category term="cpp"/><category term="debug"/><summary type="html"><![CDATA[Using DebugView]]></summary></entry><entry><title type="html">How to change the line endings in Linux</title><link href="https://kcwongjoe.github.io/blog/2025/change-line-end-in-linux/" rel="alternate" type="text/html" title="How to change the line endings in Linux"/><published>2025-01-13T00:00:00+00:00</published><updated>2025-01-13T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2025/change-line-end-in-linux</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2025/change-line-end-in-linux/"><![CDATA[<h1 id="check-line-endings">Check line endings</h1> <p>Using file command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file abc.txt
</code></pre></div></div> <p>Result:</p> <ul> <li>Unix:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abc.txt: ASCII text
</code></pre></div></div> <ul> <li>DOS:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abc.txt: ASCII text, with CRLF line terminators
</code></pre></div></div> <h1 id="change-line-endings">Change line endings</h1> <p>Using dos2unix command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dos2unix abc.txt
</code></pre></div></div> <p>Using unix2dos command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unix2dos abc.txt
</code></pre></div></div>]]></content><author><name></name></author><category term="linux"/><category term="linux"/><summary type="html"><![CDATA[Check line endings]]></summary></entry><entry><title type="html">How to find the vc runtime version from an exe</title><link href="https://kcwongjoe.github.io/blog/2024/check-vc-runtime-from-exe/" rel="alternate" type="text/html" title="How to find the vc runtime version from an exe"/><published>2024-10-02T00:00:00+00:00</published><updated>2024-10-02T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2024/check-vc-runtime-from-exe</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2024/check-vc-runtime-from-exe/"><![CDATA[<h1 id="using-dumpbin">Using Dumpbin</h1> <p>Microsoft provided a build tool called <code class="language-plaintext highlighter-rouge">dumpbin</code> to display information from exe.</p> <p>Step 1: Open the <strong>Developer Command Prompt for VS 20XX</strong></p> <p>Step 2: Run the following command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dumpbin /dependents &lt;exe file&gt;
</code></pre></div></div> <p>Step 3: Looking for the MSVCPxxx.dll or VCRUNTIMExxx.dll. The xxx is the version number of the vc runtime.</p> <ul> <li>70: Visual Studio 2003</li> <li>80: Visual Studio 2005</li> <li>100: Visual Studio 2010</li> <li>120: Visual Studio 2013</li> <li>140: Visual Studio 2015</li> <li>141: Visual Studio 2017</li> <li>142: Visual Studio 2019</li> <li>143: Visual Studio 2022</li> </ul> <h1 id="python-script-to-check-the-vc-runtime-version-in-entire-folder">Python script to check the vc runtime version in entire folder</h1> <p><a href="https://github.com/kcwongjoe/check_msvc_runtime_version">https://github.com/kcwongjoe/check_msvc_runtime_version</a></p> <h1 id="references">References</h1> <p><a href="https://learn.microsoft.com/en-us/cpp/build/reference/dumpbin-command-line">Dumpbin</a></p>]]></content><author><name></name></author><category term="programming"/><category term="cpp"/><category term="programming"/><category term="cpp"/><category term="debug"/><summary type="html"><![CDATA[Using Dumpbin]]></summary></entry><entry><title type="html">How to debug local variable and lambda on c++ release build</title><link href="https://kcwongjoe.github.io/blog/2022/cpp-debug-in-release/" rel="alternate" type="text/html" title="How to debug local variable and lambda on c++ release build"/><published>2022-07-21T00:00:00+00:00</published><updated>2022-07-21T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2022/cpp-debug-in-release</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2022/cpp-debug-in-release/"><![CDATA[<p>The solution is to turn the optimization off on your scripts using</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma optimize("", off)
</span></code></pre></div></div> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma optimize("", off)
</span><span class="kt">bool</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// &lt;-- This can be debugged in a release</span>
<span class="cp">#pragma optimize("", on)
</span><span class="kt">bool</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// &lt;-- This can't be debugged in a release</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="programming"/><category term="cpp"/><category term="programming"/><category term="cpp"/><category term="debug"/><summary type="html"><![CDATA[The solution is to turn the optimization off on your scripts using]]></summary></entry><entry><title type="html">Why auto is bad in c++</title><link href="https://kcwongjoe.github.io/blog/2021/why-auto-bad-in-cpp/" rel="alternate" type="text/html" title="Why auto is bad in c++"/><published>2021-10-14T00:00:00+00:00</published><updated>2021-10-14T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2021/why-auto-bad-in-cpp</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2021/why-auto-bad-in-cpp/"><![CDATA[<blockquote> <p>When <strong>auto</strong> keyword is available in c++ 11, it becomes a modern c++ standard. Developer feels elegant to use it, but this elegant keyword is risky to your program.</p> </blockquote> <p>When we use <strong>auto</strong>, that means we are not taking control of the variable type. The Right Hand Side (RHS) controls it.</p> <script src="https://gist.github.com/kcwongjoe/9c84196870b61036168fa4ab115b422d.js"></script> <p>The type of <code class="language-plaintext highlighter-rouge">sizeOfVar</code> is controlled by the <code class="language-plaintext highlighter-rouge">sizeof()</code> and the return type of <code class="language-plaintext highlighter-rouge">sizeof()</code> is dependent on the compiler. sizeOfVar may be <strong>unsigned long</strong> or <strong>unsigned long long</strong> and you have no idea on your code.</p> <hr/> <p>The most common way of using auto keyword is in the for loop. We use auto (4 characters) to replace int (3 characters).</p> <script src="https://gist.github.com/kcwongjoe/fe946450b387268cc39492ee3c709687.js"></script> <p>The above code is fine. But if we reverse the iteration, the program will crash.</p> <script src="https://gist.github.com/kcwongjoe/e8493fdefcad707a20d90f02063c3249.js"></script> <p><code class="language-plaintext highlighter-rouge">size()</code> returns a size_t type (<strong>unsigned int</strong>) which is never below zero. And so</p> <blockquote> <p>(unsigned int) 0–1 = 4294967295</p> </blockquote> <p>The <strong>i &gt;= 0</strong> condition will always be satisfied and the program will throw an out of range error in line 3. <strong>auto</strong> should be used very carefully. However, if we know it is an <strong>int</strong> type, why should we type one more character and get ourselves uncomfortable.</p> <hr/> <p>However, <strong>auto</strong> sometimes is useful if the type name is significantly long, for instance:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">system_clock</span><span class="o">::</span><span class="n">time_point</span> <span class="n">tim</span> <span class="o">=</span> <span class="n">getTime</span><span class="p">();</span>
</code></pre></div></div> <p>Even through we can see the type name on your code, you still have no clue what it is, right?</p>]]></content><author><name></name></author><category term="programming"/><category term="cpp"/><category term="programming"/><category term="cpp"/><summary type="html"><![CDATA[When auto keyword is available in c++ 11, it becomes a modern c++ standard. Developer feels elegant to use it, but this elegant keyword is risky to your program.]]></summary></entry><entry><title type="html">Deep Copy/Shadow Copy an Object in Java</title><link href="https://kcwongjoe.github.io/blog/2021/deep-copy-in-java/" rel="alternate" type="text/html" title="Deep Copy/Shadow Copy an Object in Java"/><published>2021-05-12T00:00:00+00:00</published><updated>2021-05-12T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2021/deep-copy-in-java</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2021/deep-copy-in-java/"><![CDATA[<h4 id="method-1-implement-cloneable">Method 1: Implement Cloneable</h4> <script src="https://gist.github.com/kcwongjoe/22d78cd46465189d8446317c4d1d1600.js"></script> <h4 id="method-2-creating-a-copy-constructor-or-copy-factory">Method 2: Creating a Copy constructor or copy factory</h4> <script src="https://gist.github.com/kcwongjoe/c6b123697d40dcfb3d78ea09d4eb6d1e.js"></script> <script src="https://gist.github.com/kcwongjoe/000662e99a4adad964410de7ac6c231a.js"></script> <h4 id="method-3-using-serializable">Method 3: Using Serializable</h4> <p>This method copy all of the object and instance inside the class. But I personally not suggest using this method because of the performance concerns. This method converts the object into a ByteArray and then convert it back into a new object.</p> <script src="https://gist.github.com/kcwongjoe/08ce470fd14b43d082ff25e843cd8b28.js"></script> <p>We can also use apache utils to implement it:</p> <script src="https://gist.github.com/kcwongjoe/433f25733116e31e17316e789637905a.js"></script>]]></content><author><name></name></author><category term="programming"/><category term="java"/><category term="notes"/><category term="programming"/><category term="java"/><category term="notes"/><summary type="html"><![CDATA[Method 1: Implement Cloneable]]></summary></entry><entry><title type="html">How to import OpenCV 4.5.2 in android studio</title><link href="https://kcwongjoe.github.io/blog/2021/import-opencv-to-android-studio/" rel="alternate" type="text/html" title="How to import OpenCV 4.5.2 in android studio"/><published>2021-04-22T00:00:00+00:00</published><updated>2021-04-22T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2021/import-opencv-to-android-studio</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2021/import-opencv-to-android-studio/"><![CDATA[<h4 id="step-1-download-opencv-sdk">Step 1: Download OpenCV SDK</h4> <p>Download from https://opencv.org/releases/ and unzip it.</p> <h4 id="step-2-create-your-android-project-with-jni">Step 2: Create your android project with JNI</h4> <p>File &gt; New &gt; New Project…</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/create_project-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/create_project-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/create_project-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/create_project.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="step-3-import-opencv">Step 3: Import OpenCV</h4> <p>File &gt; New &gt; Import Module…</p> <p>And choose the “<em>sdk</em>” folder in the OpenCV SDK.</p> <p><em>Some tutorials suggested to rename the folder before import. Don’t do that. It is because OpenCV hardcoded the path with the name of “sdk” in the native/jni/OpenCVConfig.cmake</em></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/import_opencv-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/import_opencv-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/import_opencv-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/import_opencv.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="step-4-edit-settinggradle">Step 4: Edit setting.gradle</h4> <ol> <li>Open setting.gradle</li> <li>Add a module with the name “opencv” and link to the folder “sdk”</li> </ol> <div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">include</span> <span class="s2">"opencv"</span>
<span class="n">project</span><span class="o">(</span><span class="s2">":opencv"</span><span class="o">).</span><span class="na">projectDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s2">"sdk"</span><span class="o">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/add_modules-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/add_modules-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/add_modules-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/add_modules.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="step-5-edit-the-application-buildgradle">Step 5: Edit the application build.gradle</h4> <p>⁣1. Open the application build.gradle which is under the “<em>app</em>” folder.</p> <p>⁣2. Add <strong>OpenCV_DIR</strong> cmake argument under android &gt; defaultConfig &gt; externalNativeBuild &gt; cmake</p> <div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arguments</span> <span class="s2">"-DOpenCV_DIR="</span> <span class="o">+</span> <span class="n">file</span><span class="o">(</span><span class="s1">'../sdk'</span><span class="o">).</span><span class="na">absolutePath</span> <span class="o">+</span> <span class="s2">"/native/jni"</span><span class="o">,</span>
        <span class="s2">"-DANDROID_TOOLCHAIN=clang"</span><span class="o">,</span>
        <span class="s2">"-DANDROID_STL=c++_shared"</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/setting_gradle-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/setting_gradle-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/setting_gradle-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/setting_gradle.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>⁣3. Add OpenCV module dependency to application</p> <div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="nf">project</span><span class="o">(</span><span class="s1">':opencv'</span><span class="o">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/add_opencv_dep-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/add_opencv_dep-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/add_opencv_dep-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/add_opencv_dep.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="step-6-modify-the-application-cmake-file">Step 6: Modify the application cmake file</h4> <p>⁣1. Open CMakeLists.txt in app/src/main/cpp</p> <p>⁣2. Add the following code to load the OpenCV package</p> <div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span><span class="p">(</span>ANDROID_OPENCV_COMPONENTS <span class="s2">"opencv_java"</span> CACHE STRING <span class="s2">""</span><span class="p">)</span>
<span class="nb">message</span><span class="p">(</span>STATUS <span class="s2">"ANDROID_ABI=</span><span class="si">${</span><span class="nv">ANDROID_ABI</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>OpenCV REQUIRED COMPONENTS <span class="si">${</span><span class="nv">ANDROID_OPENCV_COMPONENTS</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div> <p>⁣Link project with the library</p> <div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">target_link_libraries</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span> <span class="si">${</span><span class="nv">ANDROID_OPENCV_COMPONENTS</span><span class="si">}</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/edit_cmake-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/edit_cmake-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/edit_cmake-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/edit_cmake.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="final-sync-gradle">Final: Sync Gradle</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/sync_gradle-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/sync_gradle-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/sync_gradle-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/sync_gradle.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>And now you can import OpenCV library in JNI</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/final_example_cpp-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/final_example_cpp-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/final_example_cpp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/final_example_cpp.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>and in the java.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 px-md-5"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/2021-04-22-opencv-android/final_example_java-480.webp 480w,/assets/img/blog/2021-04-22-opencv-android/final_example_java-800.webp 800w,/assets/img/blog/2021-04-22-opencv-android/final_example_java-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/blog/2021-04-22-opencv-android/final_example_java.png" class="img-fluid z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>To study how to program OpenCV, read samples in the SDK folder you have downloaded. Enjoy~</p>]]></content><author><name></name></author><category term="android"/><category term="opencv"/><category term="opencv"/><category term="android_studio"/><category term="cpp"/><category term="android"/><category term="jni"/><summary type="html"><![CDATA[Step 1: Download OpenCV SDK]]></summary></entry><entry><title type="html">Using submodules on git</title><link href="https://kcwongjoe.github.io/blog/2021/using-submodules-git/" rel="alternate" type="text/html" title="Using submodules on git"/><published>2021-03-12T00:00:00+00:00</published><updated>2021-03-12T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2021/using-submodules-git</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2021/using-submodules-git/"><![CDATA[<h1 id="add-a-submodule">Add a submodule</h1> <p>Run the following command, then you can commit and push it.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule add &lt;remote url&gt; &lt;destination folder&gt;
</code></pre></div></div> <h1 id="update-submodules">Update submodules</h1> <p>Run the following command to update your local configuration file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule update <span class="nt">--init</span> <span class="nt">--recursive</span>
</code></pre></div></div> <p>Then you can pull all the submodules right now.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule foreach <span class="nt">--recursive</span> git pull origin master
</code></pre></div></div> <h1 id="remove-submodules">Remove submodules</h1> <p>Run the following commands, then you can commit and push it.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule deinit &lt;submodule path&gt;
git <span class="nb">rm</span> &lt;submodule path&gt;
</code></pre></div></div> <h1 id="add-submodules-summary-to-git-status">Add submodules summary to git status</h1> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> status.submoduleSummary <span class="nb">true</span>
</code></pre></div></div> <h1 id="add-submodules-differences-to-git-diff">Add submodules differences to git diff</h1> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> diff.submodule log
</code></pre></div></div>]]></content><author><name></name></author><category term="git,"/><category term="notes"/><category term="git,"/><category term="notes,"/><category term="submodules"/><summary type="html"><![CDATA[Add a submodule]]></summary></entry><entry><title type="html">Passing a function as a parameter in c++</title><link href="https://kcwongjoe.github.io/blog/2021/pass-cpp-function/" rel="alternate" type="text/html" title="Passing a function as a parameter in c++"/><published>2021-03-01T00:00:00+00:00</published><updated>2021-03-01T00:00:00+00:00</updated><id>https://kcwongjoe.github.io/blog/2021/pass-cpp-function</id><content type="html" xml:base="https://kcwongjoe.github.io/blog/2021/pass-cpp-function/"><![CDATA[<p>There are at least three methods to pass a function argument in c++. Before we start, let us review the concept of the lambda expression.</p> <h1 id="lambda-expression">Lambda expression</h1> <p>Lambda expression is an unnamed function that can be passed as a variable. Here is an example of a function in general form and lambda expression:</p> <script src="https://gist.github.com/kcwongjoe/3dceeb41975bebb0010a56bfae23cf3a.js"></script> <p>It is composited by [] <strong>capture list</strong>, () <strong>argument list</strong> and {} <strong>function body</strong>. Here is another example of a lambda expression:</p> <script src="https://gist.github.com/kcwongjoe/47eeb923653deeccbc869c2d16c45e03.js"></script> <h1 id="passing-function-as-a-parameter">Passing function as a parameter</h1> <p>There are three ways to pass a function as a parameter:</p> <ol> <li>Function Pointer</li> <li>Declare by std::function</li> <li>Function template</li> </ol> <h4 id="method-1-function-pointer">Method 1: Function Pointer</h4> <p>Con: Can not pass the local variable to the lambda function</p> <script src="https://gist.github.com/kcwongjoe/32c682e535b35787743c166fad1944de.js"></script> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">Func</span><span class="p">)(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
<span class="kt">void</span> <span class="n">is</span> <span class="n">the</span> <span class="k">return</span> <span class="n">type</span> <span class="n">which</span> <span class="n">means</span> <span class="n">nothing</span> <span class="k">return</span><span class="p">.</span>
<span class="p">(</span><span class="o">*</span><span class="n">Func</span><span class="p">)</span> <span class="n">is</span> <span class="n">the</span> <span class="n">funciton</span> <span class="n">pointer</span> <span class="n">name</span><span class="p">.</span>
<span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="n">is</span> <span class="n">the</span> <span class="n">arguments</span> <span class="n">type</span><span class="p">.</span>
</code></pre></div></div> <h4 id="method-2-declare-by-stdfunction">Method 2: Declare by std::function</h4> <p>Pro: Valid to pass the local variable to the lambda function</p> <p>Con: It may cause a performance drop but is not significant.</p> <script src="https://gist.github.com/kcwongjoe/2a5c1b3e18257084478898cadbb92130.js"></script> <p>Bonus: std::bind can be used if we would like to pass a function from one object to another object in the std::function parameter.</p> <script src="https://gist.github.com/kcwongjoe/0c4550ddc0aa6dd8fb9b43946d19ecc2.js"></script> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">I_have_a_usefull_function</span><span class="o">::</span><span class="n">func</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">)</span>
<span class="n">The</span> <span class="n">first</span> <span class="n">parameter</span> <span class="s">"&amp;I_have_a_usefull_function::func"</span> <span class="n">is</span> <span class="n">the</span> <span class="n">function</span> <span class="n">pointer</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">pass</span><span class="p">.</span>
<span class="n">Other</span> <span class="n">parameters</span> <span class="n">are</span> <span class="n">the</span> <span class="n">argument</span> <span class="n">pass</span> <span class="n">to</span> <span class="n">the</span> <span class="n">funciton</span> <span class="n">pointer</span><span class="p">.</span> <span class="n">In</span> <span class="k">this</span> <span class="n">example</span><span class="p">,</span> <span class="s">"this"</span> <span class="n">is</span> <span class="n">passed</span> <span class="n">to</span> <span class="n">inside</span> <span class="n">the</span> <span class="n">function</span> <span class="n">body</span><span class="p">.</span> <span class="n">In</span> <span class="k">this</span> <span class="n">example</span><span class="p">,</span> <span class="n">the</span> <span class="n">first</span> <span class="n">argument</span> <span class="n">is</span> <span class="n">fixed</span> <span class="n">as</span> <span class="nb">true</span><span class="p">.</span> <span class="n">The</span> <span class="n">second</span> <span class="n">argument</span> <span class="n">and</span> <span class="n">third</span> <span class="n">are</span> <span class="n">set</span> <span class="n">as</span> <span class="n">placeholders</span> <span class="mi">1</span> <span class="n">and</span> <span class="mi">2</span> <span class="n">which</span> <span class="n">can</span> <span class="n">be</span> <span class="n">input</span> <span class="n">later</span><span class="p">.</span>
</code></pre></div></div> <h4 id="method-3-function-template">Method 3: Function template</h4> <p>Pro:</p> <ol> <li>Valid to pass the local variable in the lambda function.</li> <li>No performance drop</li> </ol> <p>Con:</p> <ol> <li>Template function must be written in the header file.</li> <li>Increase the compile time</li> </ol> <script src="https://gist.github.com/kcwongjoe/68221bde5b3c2ac6429e14a5f33dc8c3.js"></script> <h2 id="references">References</h2> <p><a href="https://blog.demofox.org/2015/02/25/avoiding-the-performance-hazzards-of-stdfunction/">https://blog.demofox.org/2015/02/25/avoiding-the-performance-hazzards-of-stdfunction/</a></p>]]></content><author><name></name></author><category term="programming"/><category term="cpp"/><category term="programming"/><category term="cpp"/><category term="lambda"/><summary type="html"><![CDATA[Passing a function as a parameter in c++]]></summary></entry></feed>